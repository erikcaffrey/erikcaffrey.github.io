I"⁄%<p>Estructurar el c√≥digo de nuestras aplicaciones de una manera que sea mantenible y testable no es del todo simple debido a la forma en que se ha implementando el famoso <strong>Model View Controller</strong>, sin embargo desde hace un tiempo se viene hablando de nuevos caminos para conseguirlo, quiz√°s ya haz escuchado acerca de <strong>Model View Presenter y Model View View Model</strong> por tal motivo quiero hablar sobre estas alternativas para trabajar en la capa de pintado comenzando por MVP y continuando con MVVM en mi <a href="https://erikjhordan-rey.github.io/blog/2015/12/15/ANDROID-databinding-android.html">siguiente art√≠culo</a>.</p>

<p>Antes de comenzar a hablar sobre el MVP <em>recordaremos</em> la manera en que muchos desarrolladores solemos o sol√≠amos trabajar en el desarrollo de aplicaciones android.</p>

<h2 id="model-view-controller-mvc">Model View Controller (MVC)</h2>

<p>Recordar que el <a href="https://teamtreehouse.com/library/build-a-blog-reader-android-app/exploring-the-masterdetail-template/the-modelviewcontroller-mvc-design-pattern-2">MVC</a> es un patr√≥n que permite desacoplar la implementaci√≥n de las vistas de la implementaci√≥n de la l√≥gica de negocio de nuestro modelo.</p>

<h3 id="c√≥mo-se-aplica-actualmente-el-mvc-en-android">¬øC√≥mo se aplica actualmente el MVC en Android?</h3>

<h4 id="modelos">Modelos</h4>
<p>El encargado de encapsular y mantener la l√≥gica de negocio lo que tiene que hacer nuestra aplicaci√≥n (Que vamos a mostrar).</p>

<h4 id="vistas">Vistas</h4>
<p>Los encargados de dibujar las vistas de nuestra aplicaci√≥n ese conjunto de layouts creados en xml. (C√≥mo lo vamos a mostrar).</p>

<h4 id="controladores">Controladores</h4>
<p>Su funci√≥n es intercambiar mensajes entre la vista y el modelo, t√≠picamente se usa una subclase de Activity, Fragment y un Service como un controlador. (Formatea el modelo para su visualizaci√≥n y manipula eventos como la entrada del usuario).</p>

<h3 id="en-donde-comienzan-los-problemas-al-usar-mvc">¬øEn donde comienzan los problemas al usar MVC?</h3>

<p>Una mala aplicaci√≥n de este patr√≥n comienza cuando decidimos usar una activity o un Fragment como un controlador ya que las actividades y fragmentos forman parte de la vista dentro de MVC, es decir si son controladores pero √∫nicamente de las vistas, son los encargados de mantener el estado puro y l√≥gico de la vista as√≠ como reaccionar ante posibles eventos del usuario.</p>

<p>Si usamos una <em>Activity como controlador</em> y su l√≥gica de presentaci√≥n cambia necesitaremos agregar m√°s c√≥digo, si a eso le sumamos la l√≥gica de controlador y si tambi√©n tenemos actividades o fragmentos que hagan lo mismo tendremos que duplicar c√≥digo porque el controlador no est√° desacoplado de la vista y es en ese momento en donde comenzamos a realizar una bola de nieve creciente y gigante con nuestro c√≥digo terminando con clases que contienen miles de l√≠neas de c√≥digo volvi√©ndose ilegibles e in mantenibles y por supuesto dif√≠cilmente podr√≠amos testearlas.</p>

<p><img src="/images/2015/11/mvc-tr.png" alt="mvc_tr" class="center-image" /></p>

<p>Esto no quiere decir que el MVC sea malo sino que una mala aplicaci√≥n de este patr√≥n hace que se convierta en un anti-patr√≥n ya que nos causa muchos problemas o errores en el desarrollo de nuestro d√≠a d√≠a, normalmente al implementar un controlador dentro de una Activity o un Fragment.</p>

<p>Lo m√°s importante es que siempre debemos intentar separar las vistas de los controladores y es en este punto donde llega MVP ya que permite separar e independizar la mayor√≠a de nuestro c√≥digo de una forma m√°s elegante.</p>

<h1 id="model-view-presenter-mvp">Model View Presenter (MVP)</h1>

<p>El <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter">Model View Presenter</a> (MVP) es un patr√≥n derivado del MVC com√∫nmente usado en la construcci√≥n de interfaces gr√°ficas, debemos considerar y tener en mente es que el <strong>MVP</strong> no es un patr√≥n de arquitectura de aplicaciones pero es usado para la arquitectura, es decir s√≥lo se encarga de implementar toda esa l√≥gica de la <strong>capa de presentaci√≥n</strong>.</p>

<p><strong>MVP</strong> permite separar la capa de pintado se enfoca en todo lo relacionado con c√≥mo <strong>funciona</strong> la interfaz queda separado del c√≥mo representarlo en nuestra UI, si se aprovecha la flexibilidad que nos ofrece se podr√≠a lograr que una misma l√≥gica pudiera tener vistas totalmente diferentes as√≠ como mejorar la testabilidad del c√≥digo de forma independiente.</p>

<p><img src="/images/2015/11/mvp.png" alt="mvp" class="center-image" /></p>

<h4 id="view">View</h4>

<p>Una View dentro de MVP no representa una vista del SDK de android (Android class View), es decir no es un TextView, ni un Button, ni un Layout, ni una Custom View, ni mucho menos una Activity o un Fragment.</p>

<p>Una View representa una abstracci√≥n de que puedo hacer con la vista, normalmente se asocia a una <em>interface</em> para representar la funcionalidad de una vista.
La parte importante est√° en que una Activity o un Fragmento tienen la responsabilidad √∫nicamente de implementar la interface View y conectar las acciones del usuario con el presenter.</p>

<h4 id="presenter">Presenter</h4>

<p>En este patr√≥n es el encargado de coordinar la implementaci√≥n de la vista y el modelo, actualiza la vista y act√∫a sobre los eventos de usuario que se env√≠an por la vista. El presenter tambi√©n recupera los datos del modelo y los prepara para su visualizaci√≥n.</p>

<h4 id="model">Model</h4>

<p>Es el proveedor de los datos que queremos mostrar en la vista, si estuvi√©ramos usando <strong>Clean Architecture</strong> el modelo ser√≠a un interactor que implemente alg√∫n caso de uso.</p>

<h3 id="por-que-deberia-usar-model-view-presenter">¬øPor que deberia usar Model View Presenter?</h3>

<p>Para que una aplicaci√≥n se extendible, mantenible y testable requiere que mantener sus capas separadas, ya que en android existen clases muy acopladas como es el caso de los Cursores y Adaptadores.
Las actividades suelen estar muy acopladas a nuestra interfaz y nuestra l√≥gica de negocio en un MVC cl√°sico, el com√∫n ejemplo est√° cuando decidimos traer informaci√≥n local de algun lugar dentro del dispositivo para pintarla en una simple lista hasta ah√≠ vamos bien ;pero que tal si en unas semanas decidimos traer los datos de la red y olvidar esos datos locales ¬øNecesitaremos reescribir esa clase? pues la respuesta es que s√≠ porque nuestra Activity o Fragment estar√° acoplada a nuestras vistas y a la forma en que obtenemos los datos para pintarlos.</p>

<p>Si aplicamos el <strong>MVP</strong> de una forma limpia la vista jamas sabra de donde se obtienen los datos y solo se enfocara en renderizarlos independizando la vista de la forma de conseguir esos datos.</p>

<h2 id="android-spotify-mvp">Android-Spotify-MVP</h2>

<p>Es un ejemplo de Model View Presenter que lo cree con la intenci√≥n de explicar c√≥mo funciona este patr√≥n dentro de nuestras aplicaciones android tambi√©n puedes encontr√°r el c√≥digo en la parte final del post.</p>

<p><img src="/images/2015/11/spotify-mvp.png" alt="mvp" class="center-image" /></p>

<h3 id="conclusi√≥n">Conclusi√≥n</h3>

<p><strong>Implementar el MVP</strong> suele ser muy confuso ya que no existe una camino o una forma estandarizada de c√≥mo se debe implementar en nuestros proyectos, m√°s bien cada uno es responsable de c√≥mo usar el patr√≥n y hacer cumplir la necesidad o el problema que se tenga que resolver.
La clave del patr√≥n var√≠a en funci√≥n de la cantidad de responsabilidades que deleguemos en el presentador, hacer que nuestras vistas sean lo m√°s tontas posibles esto quiere decir que tomen la menor cantidad de decisiones para que el presenter pueda ser reutilizado adem√°s si las entidades del SDK de android quedan fuera de el, ser√° m√°s sencillo hacer unit test.</p>

<h3 id="talk-ui-patterns">Talk UI Patterns</h3>

<p>He dado una peque√±a charla hablando sobre estos temas que puedes ver aqu√≠ <a href="https://www.youtube.com/watch?v=_e7aACEAfv4">GDG Open Lima Hangout #6 - El Android del Pasado, Presente / Futuro</a>.</p>

<h3 id="demo">Demo</h3>

<h4 id="el-c√≥digo-est√°-disponible">El c√≥digo est√° disponible</h4>

<h4 id="android">Android</h4>

<p><a href="https://github.com/erikjhordan-rey/Android-Spotify-MVP">SpotifyMVP en Github</a></p>

<p><img src="/images/2015/11/Telecine_2015-11-25-17-19-04.gif" alt="" /></p>

<h3 id="bonus">Bonus</h3>

<p>Si quieres aprender m√°s sobre <strong>MVP</strong> tambi√©n puedes darle un vistazo al gran trabajo que ha hecho mi buen amigo Pedro Hern√°ndez <strong>Pett</strong>, encuentralo en github como <strong>silmood</strong>.</p>

<ul>
  <li><strong>MVP + Dagger 2</strong> - <a href="https://www.youtube.com/watch?v=_yVE1DRY1v8">Charla for Android Talks</a></li>
  <li><strong>Introducci√≥n al Modelo Vista Presentador en Android</strong> - <a href="https://www.youtube.com/watch?v=qWh1QlRpKxk">Charla for Platzi</a></li>
  <li><strong>Spotify Streamer</strong> - <a href="https://github.com/silmood/Spotify-Streamer">source code</a></li>
</ul>

<h3 id="resources">Resources</h3>
<ul>
  <li><strong>Antonio Leiva</strong> - <a href="http://antonioleiva.com/mvp-android/">MVP for Android</a></li>
  <li><strong>Pedro G√≥mez</strong> - <a href="https://www.youtube.com/watch?v=N6yqe88ysNw">Effective Android UI</a></li>
  <li><strong>Ivan Carballo</strong> - <a href="https://github.com/ivacf/archi">archi</a></li>
</ul>

<p><strong>‚ÄúClean code always looks like it was written by someone who cares. by Michael Feathers‚Äù</strong></p>
:ET